+ plus 加号
- minus 减号
/ slash 斜杠
* asterisk 星号
% percent 百分号
< less-than 小于号
> greater-than 大于号
<= less-than-equal 小于等于号
>= greater-than-equal 大于等于号 

= (single-equal) 的作用是将右边的值赋予左边的变量名。`==` (double-equal) 的作用是检查左右离岸边是否相等。

Python 基本元素：数字、字符串和变量：
布尔型:（表示真假的类型，仅包含 True 和 False 两种取值）
整型:（整数，例如 42 、100000000 ）
浮点型:（小数，例如 3.14159 ，或用科学计数法表示的数字，例如 1.0e8 ，它表示 1 乘以 10 的 8 次方，也可写作 100000000.0 ）
字符串型:（字符组成的序列）

Python里所有数据――布尔值、整数、浮点数、字符串，甚至大型数据结构、函数以及程序――都是以对象 （object）的形式存在的。这使得 Python 语言具有很强的统一性（还有许多其他有用的特性），而这恰恰是许多其他语言所缺少的。

对象就像一个盒子:
对象的类型还决定了它装着的数据是允许被修改的变量（可变的 ）还是不可被修改的常量（不可变的 ）。你可以把不可变对象想象成一个透明但封闭的盒子：你可以看到里面装的数据，但是无法改变它。类似地，可变对象就像一个开着口的盒子，你不仅可以看到里面的数据，还可以拿出来修改它，但你无法改变这个盒子本身，即你无法改变对象的类型。

Python 是强类型的 （strongly typed），你永远无法修改一个已有对象的类型，即使它包含的值是可变的.

Strong Typing 不是指用力敲打键盘
编程语言允许你定义变量 （variable）。所谓变量就是在程序中为了方便地引用内存中的值而为它取的名称。在 Python 中，我们用 = 来给一个变量赋值。

Python 中的变量有一个非常重要的性质：它仅仅是一个名字 。赋值操作并不会实际复制 值，它只是为数据对象取个相关的名字 。名字是对对象的引用 而不是对象本身。你可以把名字想象成贴在盒子上的标签

Python 保留的关键字不能作为变量名：

False      class      finally    is         return
None       continue   for        lambda     try
True       def        from       nonlocal   while
and        del        global     not        with
as         elif       if         or         yield
assert     else       import     pass
break      except     in         raise

Python 里有两种除法：
/ 用来执行浮点 除法（十进制小数）
// 用来执行整数 除法（整除）

使用 str() 可以将其他 Python 数据类型转换为字符串
分片操作 （slice）可以从一个字符串中抽取子字符串 （字符串的一部分）
使用 len() 获得长度

读取模式  （'r'  ）、写入模式  （'w'  ）、附加模式  （'a'  ）或让你能够读取和写入文件的模式（'r+'）。

